quarkus.http.access-log.enabled=true
# Default access-log pattern with `%u` removed. Due to the mixing of Quarkus and Vert.x authorization, the user authenticated cannot be obtained at this time
quarkus.http.access-log.pattern=%{REMOTE_HOST} %l %{DATE_TIME} "%{REQUEST_LINE}" %{RESPONSE_CODE} %{RESPONSE_TIME} %b
quarkus.http.access-log.exclude-pattern=(?:/health(/live|/ready|/started)?|/metrics)
quarkus.http.non-application-root-path=${quarkus.http.root-path}

quarkus.http.cors=true
quarkus.http.cors.origins=${CORS_ALLOW_LIST_REGEX:}
quarkus.http.cors.methods=GET,POST,PATCH,DELETE,OPTIONS
quarkus.http.cors.headers=Access-Control-Request-Method,Access-Control-Allow-Credentials,Access-Control-Allow-Origin,Access-Control-Allow-Headers,Authorization,Content-Type
quarkus.http.cors.access-control-max-age=PT2H
quarkus.http.cors.access-control-allow-credentials=true
# HSTS max-age 365 days
quarkus.http.header."Strict-Transport-Security".value=max-age=31536000

quarkus.http.ssl.protocols=${kafka.admin.tls.version:TLSv1.3}
quarkus.http.ssl.certificate.file=${kafka.admin.tls.cert:}
quarkus.http.ssl.certificate.key-file=${kafka.admin.tls.key:}

# The following properties will be used when adding JWT RBAC provided by quarkus-smallrye-jwt
quarkus.smallrye-jwt.enabled=true
mp.jwt.verify.publickey.location=${kafka.admin.oauth.jwks.endpoint.uri:}
mp.jwt.verify.issuer=${kafka.admin.oauth.valid.issuer.uri:}

mp.openapi.scan.disable=true
mp.openapi.filter=org.bf2.admin.kafka.admin.handlers.OASModelFilter
# Needed following migration from Vert.x to SmallRye OpenAPI
quarkus.smallrye-openapi.path=/rest/openapi

quarkus.log.category."org.apache.kafka".level=WARN

# Default limit to the number of partitions that new topics may have configured.
kafka.admin.oauth.enabled=${quarkus.smallrye-jwt.enabled}
kafka.admin.num.partitions.max=100

########
%dev.quarkus.smallrye-jwt.enabled=false
%dev.kafka.admin.replication.factor=1
%dev.kafka.admin.basic.enabled=true
%dev.kafka.admin.bootstrap.servers=localhost:9092
%dev.quarkus.log.category."io.vertx.core.impl.BlockedThreadChecker".level=OFF
%dev.kafka.admin.acl.resource.operations={ "cluster": [ "describe", "alter" ], "group": [ "all", "delete", "describe", "read" ], "topic": [ "all", "alter", "alter_configs", "create", "delete", "describe", "describe_configs", "read", "write" ], "transactional_id": [ "all", "describe", "write" ] }

########
%testplain.kafka.admin.acl.resource.operations={ "cluster": [ "describe", "alter" ], "group": [ "all", "delete", "describe", "read" ], "topic": [ "all", "alter", "alter_configs", "create", "delete", "describe", "describe_configs", "read", "write" ], "transactional_id": [ "all", "describe", "write" ] }
%testplain.kafka.admin.oauth.enabled=false
%testplain.kafka.admin.oauth.token.endpoint.uri=Not used for `testplain` profile
%testplain.kafka.admin.replication.factor=1
%testplain.quarkus.smallrye-jwt.enabled=false
%testplain.quarkus.log.category."io.vertx.core.impl.BlockedThreadChecker".level=OFF

%testoauth.kafka.admin.acl.resource.operations={ "cluster": [ "describe", "alter" ], "group": [ "all", "delete", "describe", "read" ], "topic": [ "all", "alter", "alter_configs", "create", "delete", "describe", "describe_configs", "read", "write" ], "transactional_id": [ "all", "describe", "write" ] }
%testoauth.kafka.admin.replication.factor=1
%testoauth.kafka.admin.oauth.valid.issuer.uri=http://keycloak:8080/auth/realms/kafka-authz
%testoauth.kafka.admin.oauth.enabled=true
%testoauth.mp.jwt.verify.issuer=${kafka.admin.oauth.valid.issuer.uri:}
%testoauth.mp.jwt.verify.publickey.location=${kafka.admin.oauth.jwks.endpoint.uri:}
%testoauth.quarkus.smallrye-jwt.enabled=true
%testoauth.quarkus.log.category."io.vertx.core.impl.BlockedThreadChecker".level=OFF
